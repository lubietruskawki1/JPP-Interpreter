-- File generated by the BNF Converter (bnfc 2.9.4.1).

-- Templates for pattern matching on abstract syntax

{-# OPTIONS_GHC -fno-warn-unused-matches #-}

module Elina.Skel where

import Prelude (($), Either(..), String, (++), Show, show)
import qualified Elina.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transIdent :: Elina.Abs.Ident -> Result
transIdent x = case x of
  Elina.Abs.Ident string -> failure x

transProgram :: Show a => Elina.Abs.Program' a -> Result
transProgram x = case x of
  Elina.Abs.Program _ topdefs -> failure x

transTopDef :: Show a => Elina.Abs.TopDef' a -> Result
transTopDef x = case x of
  Elina.Abs.FnDef _ ident args type_ block -> failure x
  Elina.Abs.VarDef _ ident type_ expr -> failure x

transArg :: Show a => Elina.Abs.Arg' a -> Result
transArg x = case x of
  Elina.Abs.Arg _ ident type_ -> failure x
  Elina.Abs.ArgRef _ ident type_ -> failure x

transBlock :: Show a => Elina.Abs.Block' a -> Result
transBlock x = case x of
  Elina.Abs.Block _ stmts -> failure x

transStmt :: Show a => Elina.Abs.Stmt' a -> Result
transStmt x = case x of
  Elina.Abs.Empty _ -> failure x
  Elina.Abs.BStmt _ block -> failure x
  Elina.Abs.Decl _ topdef -> failure x
  Elina.Abs.DeclNoAss _ ident type_ -> failure x
  Elina.Abs.Ass _ ident expr -> failure x
  Elina.Abs.Incr _ ident -> failure x
  Elina.Abs.Decr _ ident -> failure x
  Elina.Abs.Ret _ expr -> failure x
  Elina.Abs.VRet _ -> failure x
  Elina.Abs.Cond _ expr block -> failure x
  Elina.Abs.CondElse _ expr block1 block2 -> failure x
  Elina.Abs.While _ expr block -> failure x
  Elina.Abs.SExp _ expr -> failure x
  Elina.Abs.Break _ -> failure x
  Elina.Abs.Continue _ -> failure x
  Elina.Abs.AssTuple _ tupleidents expr -> failure x

transTupleIdent :: Show a => Elina.Abs.TupleIdent' a -> Result
transTupleIdent x = case x of
  Elina.Abs.TupleIdent _ ident -> failure x
  Elina.Abs.TupleIdentNested _ tupleidents -> failure x

transType :: Show a => Elina.Abs.Type' a -> Result
transType x = case x of
  Elina.Abs.Int _ -> failure x
  Elina.Abs.Str _ -> failure x
  Elina.Abs.Bool _ -> failure x
  Elina.Abs.Void _ -> failure x
  Elina.Abs.Tuple _ types -> failure x

transExpr :: Show a => Elina.Abs.Expr' a -> Result
transExpr x = case x of
  Elina.Abs.EVar _ ident -> failure x
  Elina.Abs.ELitInt _ integer -> failure x
  Elina.Abs.ELitTrue _ -> failure x
  Elina.Abs.ELitFalse _ -> failure x
  Elina.Abs.EApp _ ident exprs -> failure x
  Elina.Abs.EString _ string -> failure x
  Elina.Abs.Neg _ expr -> failure x
  Elina.Abs.Not _ expr -> failure x
  Elina.Abs.EMul _ expr1 mulop expr2 -> failure x
  Elina.Abs.EAdd _ expr1 addop expr2 -> failure x
  Elina.Abs.ERel _ expr1 relop expr2 -> failure x
  Elina.Abs.EAnd _ expr1 expr2 -> failure x
  Elina.Abs.EOr _ expr1 expr2 -> failure x
  Elina.Abs.ETuple _ exprs -> failure x

transAddOp :: Show a => Elina.Abs.AddOp' a -> Result
transAddOp x = case x of
  Elina.Abs.Plus _ -> failure x
  Elina.Abs.Minus _ -> failure x

transMulOp :: Show a => Elina.Abs.MulOp' a -> Result
transMulOp x = case x of
  Elina.Abs.Times _ -> failure x
  Elina.Abs.Div _ -> failure x
  Elina.Abs.Mod _ -> failure x

transRelOp :: Show a => Elina.Abs.RelOp' a -> Result
transRelOp x = case x of
  Elina.Abs.LTH _ -> failure x
  Elina.Abs.LE _ -> failure x
  Elina.Abs.GTH _ -> failure x
  Elina.Abs.GE _ -> failure x
  Elina.Abs.EQU _ -> failure x
  Elina.Abs.NE _ -> failure x
