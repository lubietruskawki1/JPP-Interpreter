-- programs ------------------------------------------------

entrypoints Program ;

Program.   Program ::= [TopDef] ;

FnDef.	   TopDef ::= "fn" Ident "(" [Arg] ")" ":" Type Block ;

VarDef.    TopDef ::= "var" Ident ":" Type "=" Expr ";" ;

separator nonempty TopDef "" ;

Arg. 	     Arg ::= Ident ":" Type;

ArgRef.	   Arg ::= "ref" Ident ":" Type;

separator  Arg "," ;

-- statements ----------------------------------------------

Block.     Block ::= "{" [Stmt] "}" ;

separator  Stmt "" ;

Empty.     Stmt ::= ";" ;

BStmt.     Stmt ::= Block ;

Decl.      Stmt ::= TopDef ;

DeclNoAss. Stmt ::= "var" Ident ":" Type ;

Ass.       Stmt ::= Ident "=" Expr  ";" ;

Incr.      Stmt ::= Ident "++"  ";" ;

Decr.      Stmt ::= Ident "--"  ";" ;

Ret.       Stmt ::= "return" Expr ";" ;

VRet.      Stmt ::= "return" ";" ;

Cond.      Stmt ::= "if" "(" Expr ")" Block  ;

CondElse.  Stmt ::= "if" "(" Expr ")" Block "else" Block  ;

While.     Stmt ::= "while" "(" Expr ")" Block ;

SExp.      Stmt ::= Expr  ";" ;

Break.     Stmt ::= "break"  ";" ;

Continue.  Stmt ::= "continue"  ";" ;

AssTuple.  Stmt ::= "<" [TupleIdent] ">" "=" Expr ";" ;

-- Tuples --------------------------------------------------

TupleIdent.        TupleIdent ::= Ident ;

TupleIdentNested.  TupleIdent ::= "<" [TupleIdent] ">" ;

separator nonempty TupleIdent "," ;

-- Types ---------------------------------------------------

Int.       Type ::= "int" ;

Str.       Type ::= "string" ;

Bool.      Type ::= "bool" ;

Void.      Type ::= "void" ;

Tuple.     Type ::= "tuple" "<" [Type] ">" ;

separator  Type "," ;

-- Expressions ---------------------------------------------

EVar.      Expr6 ::= Ident ;

ELitInt.   Expr6 ::= Integer ;

ELitTrue.  Expr6 ::= "true" ;

ELitFalse. Expr6 ::= "false" ;

EApp.      Expr6 ::= Ident "(" [Expr] ")" ;

EString.   Expr6 ::= String ;

Neg.       Expr5 ::= "-" Expr6 ;

Not.       Expr5 ::= "!" Expr6 ;

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;

ERel.      Expr2 ::= Expr2 RelOp Expr3 ;

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ;

EOr.       Expr ::= Expr1 "||" Expr ;

ETuple.    Expr7 ::= "[" [Expr] "]" ;

coercions  Expr 7 ;

separator  Expr "," ;

-- operators -----------------------------------------------

Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;